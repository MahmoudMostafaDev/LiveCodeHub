generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model courses {
//   id               Int                @id @default(autoincrement())
//   name             String             @db.VarChar(255)
//   description      String?
//   created_at       DateTime?          @default(now()) @db.Timestamp(6)
//   thumbnail        String?
//   popularity       Int?
//   course_user      course_user[]
//   students         students[]
//   videos           videos[]
//   counter          Int                @default(0)
//   user_video_stops user_video_stops[]
// }

// model course_user {
//   id        Int      @id @default(autoincrement())
//   course_id Int
//   user_id   Int
//   course    courses  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_user_course")
//   students  students @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_course_user_user")
// }

// model users {
//   id       Int        @id @default(autoincrement())
//   username String     @unique @db.VarChar(50)
//   password String?
//   provider provider   @default(CREDENTIALS)
//   email    String?    @unique @db.VarChar(60)
//   image    String?
//   students students[]
//   teacher  teachers[]
// }

// model teachers {
//   id      Int   @id @default(autoincrement())
//   user_id Int
//   user    users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
// }

// model students {
//   user_id          Int                @unique
//   user             users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
//   last_course      Int?
//   course_user      course_user[]
//   course           courses?           @relation(fields: [last_course], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_course")
//   user_video_stops user_video_stops[]
//   student_progress student_progress[]
//   streak           streak?
//   todayCounter     Int                @default(0)
//   counterDate      DateTime           @default(now())
// }

// model student_progress {
//   id      Int @id @default(autoincrement())
//   user_id Int @unique

//   students students @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
// }

// model streak {
//   id         Int      @id @default(autoincrement())
//   user_id    Int      @unique
//   value      Int      @default(0)
//   lastAction DateTime @default(now())
//   students   students @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
// }

// model user_video_stops {
//   user_id   Int
//   video_id  Int
//   order     Int
//   course_id Int
//   course    courses  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
//   students  students @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
//   video     videos   @relation(fields: [video_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

//   @@id([user_id, course_id])
//   @@unique([user_id, course_id])
// }

// model videos {
//   id               Int                @id @default(autoincrement())
//   link             String
//   title            String             @default("video")
//   thumbnail        String?
//   order            Int                @default(0)
//   length           Int?
//   course_id        Int
//   course           courses            @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   user_video_stops user_video_stops[]
// }

enum provider {
  GITHUB
  GOOGLE
  CREDENTIALS
}

enum lessonType {
  VIDEO
}

//new Database model 

model user {
  id       Int      @id @default(autoincrement())
  username String   @unique @db.VarChar(50)
  password String?
  provider provider @default(CREDENTIALS)
  email    String?  @unique @db.VarChar(60)
  image    String?
  teacher  teacher?
  student  student?
}

model teacher {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   user @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model student {
  id              Int              @id @default(autoincrement())
  userId          Int              @unique
  user            user             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  courses         course[]
  streak          streak?
  studentProgress studentProgress?
  enrollments     enrollment[]
}

model streak {
  studentId  Int      @id
  value      Int      @default(0)
  lastAction DateTime @default(now())
  student    student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model studentProgress {
  studentId             Int       @unique
  lastCourseId          Int?
  lessonWatchedToday    Int?
  lastLessonWatchedDate DateTime?

  course  course? @relation(fields: [lastCourseId], references: [id])
  student student @relation(fields: [studentId], references: [id])
}

model course {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String?
  thumbnail    String?
  popularity   Int?
  lessons      Int      @default(0)
  createdAt    DateTime @default(now())
  lastModified DateTime @updatedAt()

  lessonsSources  lesson[]
  enrollments     enrollment[]
  studentProgress studentProgress[]
  student         student?          @relation(fields: [studentId], references: [id])
  studentId       Int?
}

model lesson {
  id         Int        @id @default(autoincrement())
  lessonType lessonType @default(VIDEO)
  sourceId   Int        @unique
  courseId   Int

  studentLastLessonsStops studentLastLessonsStops[]
  video                   video?                    @relation(fields: [sourceId], references: [id])
  course                  course                    @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model video {
  id           Int    @id @default(autoincrement())
  link         String
  title        String @default("video")
  thumbnail    String
  lessonNumber Int
  duration     Int

  lesson lesson?
}

model enrollment {
  studentId Int
  courseId  Int

  student student @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  course  course  @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([studentId, courseId])
}

model studentLastLessonsStops {
  studentId Int
  lessonId  Int

  lesson lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([studentId, lessonId])
}
